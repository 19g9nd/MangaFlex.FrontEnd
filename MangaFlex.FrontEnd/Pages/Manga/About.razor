@page "/Manga/About/{Id}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@using MangaFlexFront.Data.Mangas.Models;
@using MangaFlexFront.Data.ViewModels
@using Microsoft.AspNetCore.Authorization
@inject ILocalStorageService localStorageService
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers
@using System.Net
<PageTitle>About</PageTitle>



<style>
    .container {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .image-container {
        flex: 0 0 auto;
        margin-right: 15px;
    }

    img {
        border: 2px solid #000;
        box-shadow: #ecc500 4px 4px 0 0, #000 4px 4px 0 1.5px;
        transform: translate(2px, 2px);
        border-radius: 10px;
        width: 200px;
        height: 300px;
        display: block;
    }

    h1,
    h2,
    h3 {
        text-align: center;
    }

    p,
    strong {
        text-align: center;
    }

    .info {
        text-align: center;
        margin-bottom: 20px;
    }

    .bubble {
        color: black;
        max-width: 500px;
        margin: 1rem auto;
        padding: 0.2rem 1.25rem;
        text-align: center;
        font-family: "Dekko", cursive;
        text-transform: uppercase;
        font-size: 1.5rem;
        letter-spacing: 0.2rem;
        border: 0.4rem solid #000;
        position: relative;
    }

    .bubble--highlight {
        background: url('data:image/svg+xml;utf8,<svg width="100" height="100" transform="rotate(25)" opacity="0.8" version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><g  fill="%23d68810"><circle cx="25" cy="25" r="12.5"/><circle cx="75" cy="75" r="12.5"/><circle cx="75" cy="25" r="12.5"/><circle cx="25" cy="75" r="12.5"/></g></svg>'), #ffcd28;
        background-size: 13px, 100%;
        font-weight: 700;
    }

    .bubble--highlight:after {
        content: "!";
    }

    .bubble:before {
        content: "";
        position: absolute;
        left: -1rem;
        top: 0.15rem;
        width: calc(100% + 0.2rem);
        height: calc(120% + 0.2rem);
        background: url('data:image/svg+xml;utf8,<svg width="100" height="100" transform="rotate(35)" opacity="1" version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><g fill="%23250E17"><circle cx="25" cy="25" r="12.5"/><circle cx="75" cy="75" r="12.5"/><circle cx="75" cy="25" r="12.5"/><circle cx="25" cy="75" r="12.5"/></g></svg>'), #000;
        background-size: 12px, 100%;
        border: 0.4rem solid #000;
        z-index: -5;
    }

    .custom-button {
        background-color: #FFFFFF;
        border: 1px solid #222222;
        border-radius: 8px;
        box-sizing: border-box;
        color: #222222;
        cursor: pointer;
        display: inline-block;
        font-size: 16px;
        font-family: 'Lato', sans-serif;
        font-weight: 600;
        line-height: 20px;
        margin: 0;
        outline: none;
        padding: 13px 23px;
        position: relative;
        text-align: center;
        text-decoration: none;
        touch-action: manipulation;
        transition: box-shadow .2s, -ms-transform .1s, -webkit-transform .1s, transform .1s;
        user-select: none;
        -webkit-user-select: none;
        width: auto;
    }

    .custom-button:focus-visible {
        box-shadow: #222222 0 0 0 2px, rgba(255, 255, 255, 0.8) 0 0 0 4px;
        transition: box-shadow .2s;
    }

    .custom-button:active {
        background-color: #F7F7F7;
        border-color: #000000;
        transform: scale(.96);
    }

    .custom-button:disabled {
        border-color: #DDDDDD;
        color: #DDDDDD;
        cursor: not-allowed;
        opacity: 1;
    }

    .readNow {
        appearance: button;
        background-color: #000;
        background-image: none;
        border: 1px solid #000;
        border-radius: 4px;
        box-shadow: #000000 4px 4px 0 0, #ffffff 4px 4px 0 1px;
        box-sizing: border-box;
        color: #000000;
        cursor: pointer;
        display: inline-block;
        font-family: ITCAvantGardeStd-Bk, Arial, sans-serif;
        font-size: 14px;
        font-weight: 400;
        line-height: 20px;
        margin: 0 5px 10px 0;
        overflow: visible;
        padding: 12px 40px;
        text-align: center;
        text-transform: none;
        touch-action: manipulation;
        user-select: none;
        -webkit-user-select: none;
        vertical-align: middle;
        white-space: nowrap;
        text-decoration: none;
        background-color: #ffcd28;
        padding: 16px 30px;
        font-weight: 700;
    }

    .readNow:focus {
        text-decoration: none;
    }

    .readNow:hover {
        text-decoration: none;
        color: #000000;
    }

    .readNow:active {
        box-shadow: rgba(0, 0, 0, .125) 0 3px 5px inset;
        outline: 0;
    }

    .readNow:not([disabled]):active {
        box-shadow: #000000 2px 2px 0 0, #000 2px 2px 0 1px;
        transform: translate(2px, 2px);
    }

    @@media (min-width: 768px) {
        .readNow {
            padding: 12px 50px;
        }

        .container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }

        .image-container {
            flex: 0 0 auto;
            margin-right: 15px;
            margin-bottom: 15px;
        }

        .description {
            flex: 1 1 auto;
            max-width: 500px;
        }
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);

    }

    .modal-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-height: 80%;
        overflow-y: auto;
        border-radius: 5px;
        position: relative;
    }


    .modal-close {
        align-items: center;
        background-color: #FFCF00;
        border: 2px solid #111;
        border-radius: 8px;
        box-sizing: border-box;
        color: #111;
        cursor: pointer;
        display: flex;
        font-family: Inter, sans-serif;
        font-size: 16px;
        height: 48px;
        justify-content: center;
        line-height: 24px;
        max-width: 100%;
        padding: 0 25px;
        text-align: center;
        text-decoration: none;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
    }

    .modal-close:after {
        background-color: #111;
        border-radius: 8px;
        content: "";
        display: block;
        height: 48px;
        left: 0;
        width: 100%;
        position: absolute;
        top: -2px;
        transform: translate(8px, 8px);
        transition: transform .2s ease-out;
        z-index: -1;
    }

    .modal-close:hover:after {
        transform: translate(0, 0);
    }

    .modal-close:active {
        background-color: #ffbf00;
        outline: 0;
    }

    .modal-close:hover {
        outline: 0;
    }

    .modal-content {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .modal-content .custom-button {
        flex: 0 0 200px;
        min-width: 100%;
    }

    .modal-close {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        cursor: pointer;
    }
</style>


<div class="info">
    <div class="container">

        <div class="image-container">
            @if (!string.IsNullOrEmpty(manga.Cover))
            {
                <img src="@manga.Cover" alt="Cover Image" />
            }
        </div>
        <div class="description">
            <h2>@manga.Title</h2>
            @if (!string.IsNullOrEmpty(manga.Description))
            {
                <p>@manga.Description</p>
            }
            else
            {

                <div class="loading-container">
                    <div class="loading-spinner"></div>
                </div>
            }
            @if (!string.IsNullOrEmpty(manga.OriginalLanguage))
            {
                <p class="custom-button"><strong>Original Language:</strong> @manga.OriginalLanguage</p>
            }
            @if (manga.Year.HasValue)
            {
                <p class="custom-button"><strong>Year:</strong> @manga.Year</p>
            }
            @if (!string.IsNullOrEmpty(manga.LastVolume))
            {
                <p class="custom-button"><strong>Last Volume:</strong> @manga.LastVolume</p>
            }
            @if (!string.IsNullOrEmpty(manga.LastChapter))
            {
                <p class="custom-button"><strong>Last Chapter:</strong> @manga.LastChapter</p>
            }
            @if (!string.IsNullOrEmpty(manga.State))
            {
                <p class="custom-button">@manga.State</p>
            }
            @if (manga.CreatedAt.HasValue)
            {
                <p class="custom-button"><strong>Created At:</strong> @manga.CreatedAt</p>
            }
            @if (manga.UpdatedAt.HasValue)
            {
                <p class="custom-button"><strong>Updated At:</strong> @manga.UpdatedAt</p>
            }

            @if (manga.Tags != null && manga.Tags.Any())
            {
                <h3>Genres:</h3>
                <ul>
                    @foreach (var tag in manga.Tags)
                    {
                        <p class="custom-button">@tag</p>
                    }
                </ul>
            }
            @* <select id="status" onchange="logManga('@manga.Id', @isMangaLogged.ToString()?.ToLower())"
            class="form-control" id="rating" name="score">
            <option disabled selected="@(mangaStatus is null || mangaStatus == "Delete")">None</option>
            <option value="Planning to Read" selected="@(mangaStatus == "Planning to Read")">Planning to Read
            </option>
            <option value="Reading" selected="@(mangaStatus == "Reading")">Reading</option>
            <option value="Completed" selected="@(mangaStatus == "Completed")">Completed</option>
            <option value="On-Hold" selected="@(mangaStatus == "On-Hold")">On-Hold</option>
            <option value="Dropped" selected="@(mangaStatus == "Dropped")">Dropped</option>
            @if (mangaStatus is not null)
            {
            <option value="Delete" style="color: red;">Delete</option>
            }
            </select> *@
            <br>
            <a class="readNow" role="button" onclick="openLanguageOptions('@manga.Id')">Read now</a>
            <div id="mangaLanguageModal" class="modal">
                <div class="modal-content">
                    <span class="modal-close" onclick="closeModal()">&times;</span>
                    <input type="hidden" id="mangaId" name="mangaId" />
                    <AvailableLanguages MangaId="@Id" />
                </div>
            </div>

        </div>
    </div>
</div>
<script>
    function closeModal() {
        const modal = document.getElementById('mangaLanguageModal');
        modal.style.display = 'none';
    }

    function openLanguageOptions() {
        const modal = document.getElementById('mangaLanguageModal');
        modal.style.display = 'flex';
    }

    async function logManga(mangaId, isLogged) {
        var selectElement = document.getElementById("status");
        var selectedValue = selectElement.value;

        let jsonData = {
            MangaId: mangaId,
            Status: selectedValue,
        };
        if (selectedValue === "Delete") {
            await fetch('/Manga/DeleteUserManga?id=' + mangaId, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(data => {
                location.reload();
            })
        }
        else if (isLogged) {
            await fetch('/Manga/UpdateUserManga', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            }).then(data => {
                location.reload();
            })
        }
        else {
            await fetch('/Manga/AddUserManga', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            }).then(data => {
                location.reload();
            })
        }

    }
</script>

@code {
    [Parameter]
    public string Id { get; set; }
    AvailableLanguagesVM availableLanguages = new AvailableLanguagesVM();
    MangaFlexFront.Data.Mangas.Models.Manga manga = new MangaFlexFront.Data.Mangas.Models.Manga();
    HttpClient mangaflexApi = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        mangaflexApi = httpClientFactory.CreateClient("mangaflexApi");

        await GetManga(Id);
    }

    private async Task GetManga(string mangaId)
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/Manga/About?id={mangaId}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);
            response.EnsureSuccessStatusCode();

            if (response.IsSuccessStatusCode)
            {
                manga = await response.Content.ReadFromJsonAsync<Manga>();
            }
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("/Error/Unathorized");
            }
            else
            {
                //HTTP errors
                @* NavigationManager.NavigateTo("/Error/OtherError"); *@
            }
        }
        catch (Exception ex)
        {
            // other errors
            @* NavigationManager.NavigateTo("/Error/GeneralError"); *@
        }
    }


    private async Task LoadAvailableLanguages(string mangaId)
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get,
            $"api/Mangas/AvailableLanguages?id={mangaId}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadAsStringAsync();

            }
            else
            {
                if (response.StatusCode == HttpStatusCode.Unauthorized)
                {
                    NavigationManager.NavigateTo("/Error/Unathorized");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

}
