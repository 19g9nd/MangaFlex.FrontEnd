@page "/User/Chat/{FriendId}"
@using MangaFlexFront.Data.Message.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@using MangaFlexFront.Data.Mangas.Models;
@using MangaFlexFront.Data.SignalR
@using MangaFlexFront.Data.Users.ViewModels
@using MangaFlexFront.Data.ViewModels
@using Microsoft.AspNetCore.Authorization
@inject ILocalStorageService localStorageService
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider provider;
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.SignalR.Client
@inject ChatService chatService

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
    }

    .chat-container {
        max-width: 100%;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        height: 100%;
    }

    .chat-box {
        height: 100%;
        overflow-y: auto;
        padding: 10px;
    }

    .message {
        padding: 5px 10px;
        margin-bottom: 10px;
        border-radius: 10px !important;
        max-width: 70%;
    }

    .received {
        background-color: #f0f0f0;
        align-self: flex-start;
    }

    .sent {
        background-color: #007bff;
        color: white;
    }

    .sent {
        margin-left: auto;
        margin-right: 0;
        align-self: flex-end
    }

    .message-input {
        display: flex;
        align-items: center;
        padding: 10px;
        background-color: #f0f0f0;
    }

    .message-input input {
        display: flex;
        align-items: center;
        flex: 1;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-right: 10px;
    }

    .message-input button {
        padding: 8px 15px;
        background-color: #007bff;
        border: none;
        color: white;
        border-radius: 5px;
        cursor: pointer;
    }

    .message-input button:hover {
        background-color: #0056b3;
    }

    body,
    html {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        height: 100%;
        overflow: hidden;
    }

    .chat-container {
        width: 100%;
        height: 90vh;
        border: 1px solid #ccc;
        border-radius: 10px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .avatar {
        width: 50px;
        /* ������� ������ ������� */
        height: 50px;
        border-radius: 50%;
        /* ��� ������� �������� */
        margin-right: 10px;
        /* ���������� ������� �� ������ ������� */
    }

    .chat-box {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .message {
        padding: 5px 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        display: table;
    }

    .received {
        background-color: #f0f0f0;
        align-self: flex-start;
    }

    .sent {
        background-color: #007bff;
        color: white;
        align-self: flex-end;
    }

    .message-input {
        display: flex;
        align-items: center;
        padding: 10px;
        background-color: #f0f0f0;
        border-radius: 10px;
    }

    .message-input input {
        flex: 1;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-right: 10px;
    }

    .message-input button {
        padding: 8px 15px;
        background-color: #007bff;
        border: none;
        color: white;
        border-radius: 10px;
        cursor: pointer;
    }

    .message-input button:hover {
        background-color: #0056b3;
    }

    .friend-info {
        display: flex;
        align-items: center;
        padding: 10px;
        background-color: #f0f0f0;
        border-bottom: 1px solid #ccc;
    }

    .friend-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-right: 10px;
    }
</style>

@if (messages is null)
{
    <div class="loading-container">
        <div aria-label="Orange and tan hamster running in a metal wheel" role="img" class="wheel-and-hamster" id="loading">
            <div class="wheel"></div>
            <div class="hamster">
                <div class="hamster__body">
                    <div class="hamster__head">
                        <div class="hamster__ear"></div>
                        <div class="hamster__eye"></div>
                        <div class="hamster__nose"></div>
                    </div>
                    <div class="hamster__limb hamster__limb--fr"></div>
                    <div class="hamster__limb hamster__limb--fl"></div>
                    <div class="hamster__limb hamster__limb--br"></div>
                    <div class="hamster__limb hamster__limb--bl"></div>
                    <div class="hamster__tail"></div>
                </div>
            </div>
            <div class="spoke"></div>
        </div>
    </div>
}
else
{


    <div class="chat-container">
        <div class="friend-info">
            <img src="data:image/png;base64,@FriendAvatarBase64" class="friend-avatar" alt="Friend's Avatar" />
            <p>@friendInfo.User.UserName</p>
        </div>
        <div class="chat-box">
            @foreach (var item in messages.Reverse())
            {
                @if (item.User.UserName == username)
                {
                    <div class="message sent">
                        @item.MessageContent
                        @item.SentAt.ToShortTimeString()
                        <img src="data:image/png;base64,@UserAvatarBase64" class="avatar" alt="Your Avatar" />
                    </div>
                }
                else
                {
                    <div class="message received">
                        <img src="data:image/png;base64,@FriendAvatarBase64" class="avatar" alt="Friend's Avatar" />
                        @item.SentAt.ToShortTimeString()
                        @item.MessageContent
                    </div>
                }
            }
        </div>
        <div class="message-input">
            <InputText type="text" @bind-Value="Message" placeholder="Type your message..." />
            <button disable="@(!IsNullOrWhiteSpace)" @onclick="PostMessage">Send</button>
            @* <p>@(!IsNullOrWhiteSpace)</p> *@
        </div>
    </div>
}



@code {
    [Parameter]
    public string FriendId { get; set; }
    public string Message { get; set; }
    private string username = string.Empty;
    public IEnumerable<Message> messages;
    private string UserAvatarBase64;
    private string FriendAvatarBase64;
    private GetUserProfileViewModel friendInfo { get; set; }
    private HubConnection hubConnection;
    HttpClient mangaflexApi = new HttpClient();
    protected override async Task OnInitializedAsync()
    {
        mangaflexApi = httpClientFactory.CreateClient("mangaflexApi");
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("http://localhost:5262/chathub"))
        .Build();

        hubConnection.On<string>("ReceiveMessage", async (message) =>
        {
            await InitMessage();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        var result = await provider.GetAuthenticationStateAsync();
        if (result.User.Identity.IsAuthenticated == true)
        {
            username = result.User.Identity.Name;
        }
        await InitMessage();
        await GetFriendInfo();
        var UseravatarImageBytes = await GetUserAvatar();
        var FriendavatarImageBytes = await GetFriendAvatar();
        FriendAvatarBase64 = Convert.ToBase64String(FriendavatarImageBytes);
        UserAvatarBase64 = Convert.ToBase64String(UseravatarImageBytes);
    }

    private async Task GetFriendInfo()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/User/ProfileById?id={FriendId}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                friendInfo = await response.Content.ReadFromJsonAsync<GetUserProfileViewModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching friend information: {ex.Message}");
        }
    }

    private async Task<byte[]> GetUserAvatar()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/User/GetUserAvatar");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadAsByteArrayAsync();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                return await GetDefaultAvatar();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }
        return null;
    }

    private async Task<byte[]> GetDefaultAvatar()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/User/GetDefaultAvatar");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);

            return await response.Content.ReadAsByteArrayAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading default avatar: {ex.Message}");
            return null;
        }
    }

    private async Task<byte[]> GetFriendAvatar()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/User/GetUserAvatarById?id={FriendId}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadAsByteArrayAsync();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                return await GetDefaultAvatar();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }
        return null;
    }

    private async Task InitMessage()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"api/User/Chat?id={FriendId}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
        localStorageService.GetItemAsStringAsync("accessToken"));

        var response = await mangaflexApi.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            messages = await response.Content.ReadFromJsonAsync<IEnumerable<Message>>();
        }
    }

    public bool IsNullOrWhiteSpace => Message == string.Empty;

    private async Task PostMessage()
    {
        if (string.IsNullOrWhiteSpace(Message) == false)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"api/User/PostMessage?message={Message}&friendid={FriendId}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);
            Message = string.Empty;
        }
    }
}