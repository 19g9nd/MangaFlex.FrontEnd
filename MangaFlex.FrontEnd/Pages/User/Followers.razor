@page "/User/Followers"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@using MangaFlexFront.Data.Mangas.Models;
@using MangaFlexFront.Data.Users.ViewModels
@using MangaFlexFront.Data.ViewModels
@using Microsoft.AspNetCore.Authorization
@inject ILocalStorageService localStorageService
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider provider;
@using System.Net.Http.Headers


@if (followers is null)
{
    <div class="loading-container">
        <div aria-label="Orange and tan hamster running in a metal wheel" role="img" class="wheel-and-hamster" id="loading">
            <div class="wheel"></div>
            <div class="hamster">
                <div class="hamster__body">
                    <div class="hamster__head">
                        <div class="hamster__ear"></div>
                        <div class="hamster__eye"></div>
                        <div class="hamster__nose"></div>
                    </div>
                    <div class="hamster__limb hamster__limb--fr"></div>
                    <div class="hamster__limb hamster__limb--fl"></div>
                    <div class="hamster__limb hamster__limb--br"></div>
                    <div class="hamster__limb hamster__limb--bl"></div>
                    <div class="hamster__tail"></div>
                </div>
            </div>
            <div class="spoke"></div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h2>Find Friend by ID</h2>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" @bind="friendId" placeholder="Enter Friend ID">
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick="SearchFriend">Search</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <h2>Subscriptions</h2>
                @if (followers.Subscriptions?.Any() == false)
                {
                    <p>You don't have any Subscriptions</p>
                }
                else
                {
                    <ul class="list-group">
                        @foreach (var subscription in followers.Subscriptions!)
                        {
                            <li class="list-group-item" @onclick="() => GoToProfile(subscription.Id)">@subscription.UserName</li>
                        }
                    </ul>
                }

            </div>
            <div class="col-md-6">
                <h2>Subscribers</h2>
                @if (followers.Followers?.Any() == false)
                {
                    <p>You don't have any Followers</p>
                }
                else
                {
                    <ul class="list-group">
                        @foreach (var subscriber in followers.Followers!)
                        {
                            <li class="list-group-item" @onclick="() => GoToProfile(subscriber.Id)">@subscriber</li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>

}

@code {
    private FollowersVM followers;
    private string friendId;
    HttpClient mangaflexApi = new HttpClient();
    private async Task
    SearchFriend()
    {
        if (!string.IsNullOrEmpty(friendId))
        {
            NavigationManager.NavigateTo($"/User/ProfileById/{friendId}");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        mangaflexApi = httpClientFactory.CreateClient("mangaflexApi");
        followers = await GetFollowersVMAsync();
    }

    private void GoToProfile(string userid)
    {
        NavigationManager.NavigateTo($"/User/ProfileById/{userid}");
    }

    private async Task<FollowersVM> GetFollowersVMAsync()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/User/Followers");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<FollowersVM>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        return null;
    }
}