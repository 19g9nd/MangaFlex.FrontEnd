@page "/User/ProfileById/{Id}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@using MangaFlexFront.Data.Mangas.Models;
@using MangaFlexFront.Data.Users.ViewModels
@using MangaFlexFront.Data.ViewModels
@using Microsoft.AspNetCore.Authorization
@inject ILocalStorageService localStorageService
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider provider;
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.WebSockets
@using System.Text

<style>
    h1,
    h2,
    h3 {
        text-align: center;
    }

    img {
        border-radius: 10px;
        width: 9.5em;
        height: 14em;
    }

    span,
    h1,
    h2,
    h3 {
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
    }

    .title {
        font-size: 1em;
    }

    .list,
    .list>div {
        flex-direction: column;
        border: 2px solid dimgray;
        border-radius: 15px;
    }

    .list {
        display: flexbox;
        padding: 10px;
        padding-bottom: 25px;
        width: 916px;
    }

    .list>div {
        flex-direction: column;
        display: inline-flex;
        width: 160px;
        height: 236px;
        margin: 5px;
        margin-bottom: 26px;

    }

    .list>div>div {
        margin: 5px;
        text-align: center;
    }
</style>

@if (UserProfileView is null)
{
    <div class="loading-container">
        <div aria-label="Orange and tan hamster running in a metal wheel" role="img" class="wheel-and-hamster" id="loading">
            <div class="wheel"></div>
            <div class="hamster">
                <div class="hamster__body">
                    <div class="hamster__head">
                        <div class="hamster__ear"></div>
                        <div class="hamster__eye"></div>
                        <div class="hamster__nose"></div>
                    </div>
                    <div class="hamster__limb hamster__limb--fr"></div>
                    <div class="hamster__limb hamster__limb--fl"></div>
                    <div class="hamster__limb hamster__limb--br"></div>
                    <div class="hamster__limb hamster__limb--bl"></div>
                    <div class="hamster__tail"></div>
                </div>
            </div>
            <div class="spoke"></div>
        </div>
    </div>
}
else
{
    <div class="container mt-3">
        <div class="row">
            <div class="card col-md-3 text-dark align-center text-center justify-content-center">
                <div>
                    <img src="data:image/jpeg;base64,@AvatarBase64" class="img-account-profile mb-2" alt="User Avatar"
                        style="height:250px; width:250px;">
                    <div class="card-body">
                        <h5 class="card-title">@UserProfileView.User.UserName</h5>
                        @if (username == UserProfileView.User?.UserName)
                        {
                            <h4 class="card-title">@UserProfileView?.User?.Email</h4>
                        }
                        @if (username != UserProfileView?.User?.UserName)
                        {
                            if (UserProfileView?.IsSub == false)
                            {
                                <button class="btn btn-primary" @onclick="Subscribe">Subscribe</button>
                            }
                            if (UserProfileView.IsFriends)
                            {
                                <button class="btn btn-primary" @onclick="Chat">Chat</button>
                            }
                            if (UserProfileView?.IsSub == true)
                            {
                                <button class="btn btn-primary" @onclick="UnSubscribe">Unsubscribe</button>
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <!-- Last Watches -->
                <h2>Last Read</h2>
                @if (UserProfileView?.LastWatched is null || UserProfileView.LastWatched.Any() == false)
                {

                    <h3>there is no last read manga.</h3>
                }
                else
                {
                    <div class="list mb-4">
                        @foreach (var manga in UserProfileView.LastWatched.Reverse().Take(5))
                        {
                            <div @onclick="() => VisitManga(manga.Id)">
                                <div class="img-div">
                                    <img src="@(manga.Cover ?? "https://upload.wikimedia.org/wikipedia/commons/thumb/7/71/Black.png/220px-Black.png")"
                                        alt="manga cover" />
                                </div>
                                <div>
                                    <span class="title"><b>@(manga.Title ?? "Unknown")</b></span>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}



@code {
    [Parameter]
    public string Id { get; set; }
    public GetUserProfileViewModel UserProfileView { get; set; }
    private string username = string.Empty;
    private string AvatarBase64;
    private HubConnection hubConnection;
    HttpClient mangaflexApi = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        mangaflexApi = httpClientFactory.CreateClient("mangaflexApi");
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("http://localhost:5262/profilehub"))
        .Build();

        hubConnection.On<string>("ReceiveMessage", async (message) =>
        {
            await GetUserProfileViewModel();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        var avatarImageBytes = await GetUserAvatar();
        AvatarBase64 = Convert.ToBase64String(avatarImageBytes);
        if (AvatarBase64 == null)
        {
            AvatarBase64 = "default.png";
        }
        var result = await provider.GetAuthenticationStateAsync();
        if (result.User.Identity.IsAuthenticated == true)
        {
            username = result.User.Identity.Name;
            if (string.IsNullOrEmpty(username))
            {
                NavigationManager.Refresh();
            }
        }

        await GetUserProfileViewModel();
    }


    private async Task Chat()
    {
        var request = new HttpRequestMessage(HttpMethod.Post, $"api/User/CreateChat?friendid={Id}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
        localStorageService.GetItemAsStringAsync("accessToken"));

        var response = await mangaflexApi.SendAsync(request);

        NavigationManager.NavigateTo($"/User/Chat/{Id}");
    }

    private async Task Subscribe()
    {
        var request = new HttpRequestMessage(HttpMethod.Post, $"api/User/Subscribe?id={Id}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
        localStorageService.GetItemAsStringAsync("accessToken"));

        var response = await mangaflexApi.SendAsync(request);
    }

    private async Task UnSubscribe()
    {
        var request = new HttpRequestMessage(HttpMethod.Delete, $"api/User/Unsubscribe?id={Id}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
        localStorageService.GetItemAsStringAsync("accessToken"));

        var response = await mangaflexApi.SendAsync(request);
    }

    private async Task VisitManga(string mangaId)
    {
        NavigationManager.NavigateTo($"/Manga/About/{mangaId}");
    }

    private async Task<byte[]> GetUserAvatar()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/User/GetUserAvatarById?id={Id}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadAsByteArrayAsync();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                return await GetDefaultAvatar();
            }
            else
            {
                NavigationManager.NavigateTo("/Error/NotFound");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }
        return null;
    }

    private async Task UpdateProfileAfterSubscribe()
    {
        await GetUserProfileViewModel();
        StateHasChanged();
    }

    private async Task GetUserProfileViewModel()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/User/ProfileById?id={Id}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                UserProfileView = await response.Content.ReadFromJsonAsync<GetUserProfileViewModel>();
            }
            else
            {
                NavigationManager.NavigateTo("/Error/NotFound");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task<byte[]> GetDefaultAvatar()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/User/GetDefaultAvatar");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await
            localStorageService.GetItemAsStringAsync("accessToken"));

            var response = await mangaflexApi.SendAsync(request);

            return await response.Content.ReadAsByteArrayAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading default avatar: {ex.Message}");
            return null;
        }
    }
}
